import typer
import inquirer
import rich
import rich.live
import os
from rich import print
import pip
import sys
import typing_extensions 

def install(package):
    if hasattr(pip, 'main'):
        pip.main(['install', package])
    else:
        pip._internal.main(['install', package])

console = rich.console.Console()

app = typer.Typer()

@app.command()
def init():
    """
    Create a pip project.
    """
    answers = inquirer.prompt([
        inquirer.Text("name", "What is your project name?"),
        inquirer.Text("description", "What is the description?"),
        inquirer.Text("author", "What is the author name?")
    ])
    srcpath = f"src/{answers['name']}/"
    with rich.live.Live(console.status(f"Generating [red]{answers['name']}[/] packages..."), refresh_per_second=4) as stat:
        os.makedirs(srcpath)
        with open(srcpath + "__init__.py", "x") as f:
            f.write(f"""\"\"\"
                    This file was generated by piptool!
                    Import or define any functions here.
                    \"\"\"
                    def hi():
                        return "This is {answers['name']}. Hello, Piptool!"
            """)
        with open(srcpath + "module.py", "x") as f:
            f.write("""\"\"\"
                    This file was generated by piptool!
                    Import or define any functions here.
                    \"\"\"
                    def module():
                        print("Well this went well!")
                        return true
            """)
        stat.update(console.status(f"Making extra files.... ([red]{answers['name']}[/])..."))
        with open("pyproject.toml", "x") as f:
            f.write(f"""
        # Piptool generated.
        [build-system]
            # For build system options, check the packaging.python.org guide!
            requires = ["setuptools>=61.0"]
            build-backend = "setuptools.build_meta"
        [project]
            name = "{answers['name']}"
            version = "0.0.1"
            authors = [
                {{ name="{answers['author']}" }},
            ]
            description = "{answers['description']}"
            readme = "README.md"
            requires-python = ">=3.8"
            classifiers = [
                "Programming Language :: Python :: 3",
                # Change the license using either the license attribute, or if well known, such as the MIT license, use a classifier!
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
            ]
""")
        with open("LICENSE", "x") as f:
            f.write("Piptool does not choose a license for you. Choose your own! Unsure? Use the choosealicense.com site.")
        with open("README.md", "x") as f:
            f.write(f"""
                # {answers['name']}
                Generated by Piptool! Here's how you can get started:
                    * Check out the [source files]({srcpath}) and modify it!
                    * Change the [LICENSE](LICENSE)! Unsure what to pick? [Choose a license.](https://choosealicense.com/)
                    * Change the [package info!](pyproject.toml)
                    * Change this README!
            """)
    print("Created! Check it out!")

@app.command("build")
def buildCmd():
    """
    Build a pip project.
    """
    try:
        os.system(sys.executable + " -m build")
    except:
        class NotAPackageError(Exception):
            def __init__(self, *args: object) -> None:
                super().__init__(*args)
        raise NotAPackageError("This isn't a package.")

@app.command()
def upload(token=typing_extensions.Annotated[str, typer.Option(help="The token to your PyPI account.")]):
    """
    Upload the already built package.
    """
    install("twine")
    try:
        os.system(sys.executable + f" -m twine upload dist/* -u __token__ -p {token}")
    except:
        class UploadFailedError(Exception):
            def __init__(self, *args: object) -> None:
                super().__init__(*args)
        raise UploadFailedError("Upload failed. Try fixing your token.")
    
if __name__ == "__main__":
    app()